some mainly windows project that uses glfw

Goals:
    - Multi-platform with linux and windows available
        + SIDE GOAL: Mac
    - Real time ray-tracing (NEXT SEMESTER)
        Software ray-tracing
        RTX-boosted ray-tracing using VkRay or DXR
    + SIDE GOAL: Multiple windows
        This will require a window manager interface, managing focus,
        differentiating input/messages/events for each window, etc.

    - Should be as robust as possible

    This is my first foray into multiple things:
        - Vulkan
        - Ray-tracing

    This project is currently simply a Vulkan rastering rendering engine.

    MILESTONES:
      Window Open           | DONE
      Input Handled         | DONE
      Instance Created      | DONE
      Device Created        | DONE
      Swapchain Presenting  | DONE
      Triangle Drawing      | 
      Models Drawing        | 
      Deferred Rendering    | GOAL: 9/27/19
      
    TODO:
      Shader types
      Shader loading from a file (glslc)
      Graphics pipeline creation
      Draw! triangle oh babe
      
      Buffer creation
      Memory allocation   ####oh boy doing this well will take me forever so no thank you ill just allocate for each object####
      Images can use memory
      Basic models in CPU memory
      Staging
      Memory transfer
      Binding
      Descriptor sets
      Draw! models
      
      Multiple render passes
      GBuffer setup
      Draw! deferred
      
    OTHER TODO:
      Window resizing
      Online shader compilation
      Object loading (tinyobjloader, assimp, fbx sdk?)
      Lights
      Specialized queue usage

STEPS
    All options in a given section should be complete before moving to
    the next section.

	Ideally, all of the following is complete before the beginning of the semester (3rd September):
	HARD REQUIREMENT: Section 2 is complete.
	GOAL			: Section 4.
	STRETCH			: Section 5.
	
	I recently learned that GLFW can expose the native Win32 windows handle, which makes
	things MUCH easier for handling input as I no longer have to handle the difference
	between the virtual keys and GLFW keys. I needed to do this in the first place as
	creating a swap chain with DX11/12 requires a HWND.

    1: Responsive Window                        OGL | VKN | X11 | X12 | VKR | DXR
        1.1: Opening a window                    X  |  X  |  X  |  X  |  X  |  X
        1.2: Creating contexts                   X  |     |     |     |     |
        1.3: Input is being polled               X  |  X  |  X  |  X  |  X  |  X
        1.4: Input is usable everywhere          X  |  X  |  X  |  X  |  X  |  X
        1.5: Mouse & Keyboard fully functional      |     |     |     |     |
    2: Math
        2.1: GLM implementation                     |     |	    |     |	    |
        2.2: Can use glm with directx            /  |  /  |	    |     |  /  |
    3: Drawing a Triangle
        3.1: Shader interface
        3.2: Compiling shaders
        3.3: C++ side mesh data
        3.4: Uploading mesh data to GPU
        3.5: Drawing
    4: Customization & Robustness
        4.1: Resizing windows
        4.2: ImGui
            4.2.1: Compiling & linking
            4.2.2: Drawing basic window
            4.2.3: Input properly captures
        4.3: Moving around the triangle
        4.4: Switching between renderers
        4.5: Error-handling suite is complete
	5: Models
		5.1: Creation of example models (square, cyllinder, etc)
		5.2: Model loading via assimp or FBX loader & self-written OBJ loader
	6: Lighting
	
		